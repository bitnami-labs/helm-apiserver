/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package helm

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	authorizationv1 "k8s.io/api/authorization/v1"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalRelease = builders.NewInternalResource(
		"releases",
		func() runtime.Object { return &Release{} },
		func() runtime.Object { return &ReleaseList{} },
	)
	InternalReleaseStatus = builders.NewInternalResourceStatus(
		"releases",
		func() runtime.Object { return &Release{} },
		func() runtime.Object { return &ReleaseList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("helm.bitnami.com").WithKinds(
		InternalRelease,
		InternalReleaseStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Release struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   ReleaseSpec
	Status ReleaseStatus
}

type ReleaseSpec struct {
	RepoURL     string
	ChartName   string
	Version     string
	Values      string
	Impersonate ImpersonateSpec
}

type ReleaseStatus struct {
	Phase string
	Notes string
}

type ImpersonateSpec struct {
	User               string
	Groups             []string
	Extra              map[string]authorizationv1.ExtraValue
	ServiceAccountName string
}

//
// Release Functions and Structs
//
// +k8s:deepcopy-gen=false
type ReleaseStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type ReleaseStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type ReleaseList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Release
}

func (Release) NewStatus() interface{} {
	return ReleaseStatus{}
}

func (pc *Release) GetStatus() interface{} {
	return pc.Status
}

func (pc *Release) SetStatus(s interface{}) {
	pc.Status = s.(ReleaseStatus)
}

func (pc *Release) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Release) SetSpec(s interface{}) {
	pc.Spec = s.(ReleaseSpec)
}

func (pc *Release) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Release) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Release) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Release.
// +k8s:deepcopy-gen=false
type ReleaseRegistry interface {
	ListReleases(ctx request.Context, options *internalversion.ListOptions) (*ReleaseList, error)
	GetRelease(ctx request.Context, id string, options *metav1.GetOptions) (*Release, error)
	CreateRelease(ctx request.Context, id *Release) (*Release, error)
	UpdateRelease(ctx request.Context, id *Release) (*Release, error)
	DeleteRelease(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewReleaseRegistry(sp builders.StandardStorageProvider) ReleaseRegistry {
	return &storageRelease{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageRelease struct {
	builders.StandardStorageProvider
}

func (s *storageRelease) ListReleases(ctx request.Context, options *internalversion.ListOptions) (*ReleaseList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*ReleaseList), err
}

func (s *storageRelease) GetRelease(ctx request.Context, id string, options *metav1.GetOptions) (*Release, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Release), nil
}

func (s *storageRelease) CreateRelease(ctx request.Context, object *Release) (*Release, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, false)
	if err != nil {
		return nil, err
	}
	return obj.(*Release), nil
}

func (s *storageRelease) UpdateRelease(ctx request.Context, object *Release) (*Release, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object, builders.Scheme))
	if err != nil {
		return nil, err
	}
	return obj.(*Release), nil
}

func (s *storageRelease) DeleteRelease(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
